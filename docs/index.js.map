{
  "version": 3,
  "sources": ["../docs/index.js"],
  "sourcesContent": ["\r\n// add canvas to the script\r\n;(function () {\r\n  const canvas = document.getElementById('gameCanvas')\r\n  const ctx = canvas.getContext('2d')\r\n})()\r\n\r\n\r\n// initialize config variables here\r\nlet canvas, ctx\r\n\r\n// set game patameters\r\nlet board_size = 4, line_scale = 1/12;\r\n\r\n\r\n// initialize game with parameters\r\n\r\nclass Pawn\r\n{\r\n  constructor(location = {x: 0, y: 0}, suit = 'dimgray')\r\n  {\r\n      this.location = location;\r\n      this.past = location;\r\n      this.suit = suit\r\n  }\r\n\r\n  draw (scale, current_suit) {\r\n      // destructuring\r\n      const {\r\n          location, suit,\r\n      } = this\r\n  \r\n\r\n      \r\n      // saves the current styles set elsewhere\r\n      // to avoid overwriting them\r\n      ctx.save()\r\n      let line_size = line_scale * scale;\r\n      // set the styles for this shape\r\n      ctx.fillStyle = this.suit;\r\n      ctx.lineWidth = line_size;\r\n  \r\n      // create the *path*\r\n      ctx.beginPath()\r\n      ctx.strokeStyle = 'black'\r\n      \r\n\r\n      // set up scale and stuff\r\n      let p_scale = 0.5;\r\n      let p_size = scale * p_scale;\r\n      let p_offset = p_size * 0.5;\r\n\r\n      ctx.rect((this.location.x * scale) + p_offset, (this.location.y * scale) + p_offset, p_size, p_size)\r\n  \r\n      // draw the path to screen\r\n      ctx.fill();\r\n      ctx.stroke();\r\n\r\n      ctx.lineWidth = line_size * 0.5;\r\n      if(current_suit == this.suit)\r\n      {\r\n          ctx.strokeStyle = 'gold';\r\n      }\r\n      else\r\n      {\r\n          ctx.strokeStyle = 'white';\r\n      }\r\n\r\n      ctx.stroke();\r\n\r\n      ctx.restore();\r\n  }\r\n}\r\n\r\nclass board\r\n{\r\n  constructor(size = 4)\r\n  {\r\n      this.size = size;\r\n      this.stones = Array(size*2);\r\n      this.selected_stone_index = -1;\r\n      this.current_suit = 'dimgray';\r\n      this.scale = canvas.width / this.size;\r\n  }\r\n\r\n  get_pawn(x = 0, y = 0)\r\n  {\r\n      for(let i = 0; i < this.stones.length; i++)\r\n      {\r\n          if(this.stones[i].location.x === x && this.stones[i].location.y === y)\r\n          {\r\n              return i\r\n          }\r\n      }\r\n      return -1\r\n  }\r\n\r\n\r\n  capture_pawns(stone, stones)\r\n  {\r\n      // check this stone for nearby pawns\r\n\r\n      let dirs = [{x: 1, y: 0}, {x: -1, y: 0}, {x: 0, y: -1}, {x: 0, y: 1}];\r\n      for(let k = 0; k < 4; k++)\r\n      {\r\n          let capturable = Array(0);\r\n\r\n          // right\r\n          for(let i = 1; i < this.size; i++)\r\n          {\r\n              let pawn_i = this.get_pawn(stone.location.x + (dirs[k].x*i), stone.location.y + (dirs[k].y*i))\r\n              if(pawn_i === -1)\r\n              {\r\n                  break\r\n              }\r\n              if(stones[pawn_i].suit != stone.suit)\r\n              {\r\n                  capturable.push(stones[pawn_i]);\r\n              }\r\n\r\n              if(stones[pawn_i].suit === stone.suit)\r\n              {\r\n                  // remove the previous pawns\r\n                  for(let j = 0; j < capturable.length; j++)\r\n                  {\r\n                      stones.splice(this.get_pawn(capturable[j].location.x, capturable[j].location.y), 1)\r\n                  }\r\n                  break\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  draw_board()\r\n  {\r\n      // blank the screen\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // draw the eight lines and stuff\r\n      ctx.save()\r\n\r\n\r\n      // start with selection box thing... I want yellow\r\n      if(this.selected_stone_index != -1 && this.stones[this.selected_stone_index].suit === this.current_suit)\r\n      {\r\n          ctx.beginPath()\r\n          ctx.fillStyle = 'darkturquoise'\r\n          ctx.strokeStyle = 'darkorange'\r\n          \r\n          ctx.rect(this.stones[this.selected_stone_index].location.x * this.scale + (this.scale * 0.1), this.stones[this.selected_stone_index].location.y * this.scale + (this.scale * 0.1), 0.8 * this.scale, 0.8 * this.scale);\r\n          ctx.fill()\r\n          ctx.stroke()\r\n      }\r\n\r\n      // horiz lines\r\n      for(let i = 0; i < this.size; i ++)\r\n      {\r\n          ctx.beginPath()\r\n          ctx.lineWidth = line_scale * this.scale;\r\n          ctx.strokeStyle = 'darkgray'\r\n          let dx1, dy1, dx2\r\n          dx1 = (0.5*this.scale)\r\n          dy1 = (this.scale * i) + (0.5*this.scale)\r\n          dx2 = canvas.width - (0.5*this.scale)\r\n\r\n          ctx.moveTo(dx1, dy1);\r\n          ctx.lineTo(dx2, dy1);\r\n          ctx.stroke();\r\n      }\r\n\r\n      // virt lines\r\n      for(let i = 0; i < this.size; i ++)\r\n      {\r\n          ctx.beginPath()\r\n          ctx.lineWidth = line_scale * this.scale;\r\n          ctx.strokeStyle = 'darkgray'\r\n          let dx1, dy1, dy2\r\n          dy1 = (0.5*this.scale)\r\n          dx1 = (this.scale * i) + (0.5*this.scale)\r\n\r\n          dy2 = canvas.height - (0.5*this.scale)\r\n          ctx.moveTo(dx1, dy1);\r\n          ctx.lineTo(dx1, dy2);\r\n          ctx.stroke();\r\n      }\r\n\r\n      // horiz flavor\r\n      for(let i = 0; i < this.size; i ++)\r\n      {\r\n          ctx.beginPath()\r\n          ctx.lineWidth = line_scale * this.scale * 0.5;\r\n          ctx.strokeStyle = 'white'\r\n          let dx1, dy1, dx2\r\n          dx1 = (0.5*this.scale)\r\n          dy1 = (this.scale * i) + (0.5*this.scale)\r\n\r\n          dx2 = canvas.width - (0.5*this.scale)\r\n          ctx.moveTo(dx1, dy1);\r\n          ctx.lineTo(dx2, dy1);\r\n          ctx.stroke();\r\n      }\r\n\r\n      // virt flavor\r\n      for(let i = 0; i < this.size; i ++)\r\n      {\r\n          ctx.beginPath()\r\n          ctx.lineWidth = line_scale * this.scale * 0.5;\r\n          ctx.strokeStyle = 'white'\r\n          let dx1, dy1, dy2\r\n          dy1 = (0.5*this.scale)\r\n          dx1 = (this.scale * i) + (0.5*this.scale)\r\n\r\n          dy2 = canvas.height - (0.5*this.scale)\r\n          ctx.moveTo(dx1, dy1);\r\n          ctx.lineTo(dx1, dy2);\r\n          ctx.stroke();\r\n      }\r\n\r\n      ctx.restore()\r\n\r\n      // draw pawns\r\n      for(let i = 0; i < this.stones.length; i++)\r\n      {\r\n          this.stones[i].draw(this.scale, this.current_suit);\r\n      }\r\n  }\r\n\r\n  set_board()\r\n  {\r\n      this.stones = Array(this.size * 2);\r\n      this.current_suit = 'tomato';\r\n      for(let i = 0; i < this.stones.length; i++)\r\n      {\r\n          if(i < this.size)\r\n          {\r\n              this.stones[i] = new Pawn({x: i, y: 0},'dimgray')\r\n          }\r\n          else\r\n          {\r\n              this.stones[i] = new Pawn({x: (i-this.size), y:this.size - 1}, 'tomato')\r\n          }\r\n      }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nlet game_board;\r\n\r\n\r\n\r\nfunction on_click(event)\r\n{\r\n  // get mouse location as board coordinates\r\n  let bx = ~~(((event.offsetX - (0.5*game_board.scale)) / game_board.scale) + 0.5)\r\n  let by = ~~(((event.offsetY - (0.5*game_board.scale)) / game_board.scale) + 0.5)\r\n\r\n  for(let i = 0; i < game_board.stones.length; i++)\r\n  {\r\n      // select a pawn\r\n      if((game_board.stones[i].location.x === bx) && (game_board.stones[i].location.y === by) )\r\n      {\r\n          game_board.selected_stone_index = i;\r\n          game_board.draw_board()\r\n          return\r\n      }\r\n  }\r\n\r\n  // if selection is valid\r\n  if(game_board.selected_stone_index != -1 && game_board.stones[game_board.selected_stone_index].suit === game_board.current_suit)\r\n  {\r\n\r\n      // check if move is in range\r\n      let distx = game_board.stones[game_board.selected_stone_index].location.x - bx\r\n      let disty = game_board.stones[game_board.selected_stone_index].location.y - by\r\n      let dist = Math.sqrt((distx * distx) + (disty * disty))\r\n\r\n      if(\r\n          dist === 1\r\n      )\r\n      {\r\n          game_board.stones[game_board.selected_stone_index].location.x = bx\r\n          game_board.stones[game_board.selected_stone_index].location.y = by\r\n\r\n          game_board.capture_pawns(game_board.stones[game_board.selected_stone_index], game_board.stones)\r\n          // invalidate current selection\r\n          game_board.selected_stone_index = -1;\r\n\r\n          // flop current suit\r\n          if(game_board.current_suit == 'dimgray')\r\n          {\r\n              game_board.current_suit = 'tomato'\r\n          }\r\n          else\r\n          {\r\n              game_board.current_suit = 'dimgray'\r\n          }\r\n      }\r\n  }\r\n  game_board.draw_board()\r\n}\r\n\r\n// setup config variables and start the program\r\nfunction init ()\r\n{\r\n  canvas = document.getElementById('gameCanvas')\r\n  canvas.onclick = on_click\r\n\r\n  ctx = canvas.getContext('2d')\r\n\r\n  game_board = new board(board_size)\r\n  game_board.set_board();\r\n\r\n\r\n  game_board.draw_board();\r\n\r\n\r\n}\r\n\r\n// wait for the HTML to load\r\ndocument.addEventListener('DOMContentLoaded', init)\r\n\r\n"],
  "mappings": "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",
  "names": []
}
